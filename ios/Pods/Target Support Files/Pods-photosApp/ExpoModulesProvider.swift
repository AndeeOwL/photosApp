/**
 * Automatically generated by expo-modules-autolinking.
 *
 * This autogenerated class provides a list of classes of native Expo modules,
 * but only these that are written in Swift and use the new API for creating Expo modules.
 */

import ExpoModulesCore
import ExpoCrypto
import EASClient
import ExpoImagePicker
import ExpoKeepAwake
import ExpoMailComposer
import ExpoRandom
import ExpoSystemUI
import EXUpdates
import ExpoWebBrowser
import ExpoAdapterFBSDKNext
#if EXPO_CONFIGURATION_DEBUG
import EXDevLauncher
import EXDevMenu
#endif

@objc(ExpoModulesProvider)
public class ExpoModulesProvider: ModulesProvider {
  public override func getModuleClasses() -> [AnyModule.Type] {
    return [
      CryptoModule.self,
      EASClientModule.self,
      ImagePickerModule.self,
      KeepAwakeModule.self,
      MailComposerModule.self,
      RandomModule.self,
      ExpoSystemUIModule.self,
      WebBrowserModule.self
    ]
  }

  public override func getAppDelegateSubscribers() -> [ExpoAppDelegateSubscriber.Type] {
    #if EXPO_CONFIGURATION_DEBUG
    return [
      ExpoUpdatesAppDelegateSubscriber.self,
      FacebookAppDelegate.self,
      ExpoDevLauncherAppDelegateSubscriber.self
    ]
    #else
    return [
      ExpoUpdatesAppDelegateSubscriber.self,
      FacebookAppDelegate.self
    ]
    #endif
  }

  public override func getReactDelegateHandlers() -> [ExpoReactDelegateHandlerTupleType] {
    #if EXPO_CONFIGURATION_DEBUG
    return [
      (packageName: "expo-updates", handler: ExpoUpdatesReactDelegateHandler.self),
      (packageName: "expo-dev-launcher", handler: ExpoDevLauncherReactDelegateHandler.self),
      (packageName: "expo-dev-menu", handler: ExpoDevMenuReactDelegateHandler.self)
    ]
    #else
    return [
      (packageName: "expo-updates", handler: ExpoUpdatesReactDelegateHandler.self)
    ]
    #endif
  }
}
